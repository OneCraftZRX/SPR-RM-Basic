
    
#     # port_2.readAngle()
#     port.close_port()
    # port_1.close_port()
# port.close_port()
# from position_solver import PositionSolver
# from my_serial import SerialPort
# import time

# po=PositionSolver()

# po.solve_pitch(2.000,2.5000)

import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

# 提供的数据
data =[[-0.7853981633974483, 0.32734859021368057], [-0.7696902001294993, 0.3216743481280384], [-0.7539822368615503, 0.3052765013468547], [-0.7382742735936014, 0.2998070047774227], [-0.7225663103256524, 0.29253957721111], [-0.7068583470577035, 0.28141261581418964], [-0.6911503837897545, 0.26980001901562456], [-0.6754424205218055, 0.26676527047864806], [-0.6597344572538566, 0.25118393033086484], [-0.6440264939859076, 0.24686458167963166], [-0.6283185307179586, 0.23345279248993056], [-0.6126105674500096, 0.23102968166571736], [-0.5969026041820606, 0.22694519941849445], [-0.5811946409141118, 0.21782962939479444], [-0.5654866776461627, 0.208034978771941], [-0.5497787143782138, 0.20249340075692523], [-0.5340707511102648, 0.2014904164956266], [-0.5183627878423158, 0.19093800182625398], [-0.5026548245743669, 0.17877397565793662], [-0.4869468613064179, 0.174930734689978], [-0.47123889803846897, 0.17717243773870772], [-0.45553093477052, 0.162101253769243], [-0.439822971502571, 0.15451671616055174], [-0.42411500823462206, 0.15221408091748967], [-0.40840704496667307, 0.14768711597847883], [-0.3926990816987241, 0.1399611749355567], [-0.37699111843077515, 0.13530964725341132], [-0.36128315516282616, 0.1296901011653221], [-0.3455751918948772, 0.133248730964467], [-0.32986722862692824, 0.1308761022647973], [-0.31415926535897926, 0.12850437650640623], [-0.2984513020910303, 0.11542662554613214], [-0.28274333882308134, 0.12224264705882348], [-0.26703537555513235, 0.12224264705882348], [-0.25132741228718336, 0.11395029827415704], [-0.23561944901923448, 0.12641419743305338], [-0.2199114857512855, 0.133961671379202], [-0.2042035224833365, 0.12335177865612645], [-0.18849555921538752, 0.1291072438273544], [-0.17278759594743853, 0.1291072438273544], [-0.15707963267948966, 0.12564963873748258], [-0.14137166941154067, 0.1313751416698149], [-0.12566370614359168, 0.1370261478793945], [-0.10995574287564269, 0.13126574307304784], [-0.0942477796076937, 0.13603660460713163], [-0.07853981633974472, 0.14477946673311737], [-0.06283185307179584, 0.15141415399950164], [-0.04712388980384685, 0.15378146025417394], [-0.031415926535897865, 0.1619773045235504], [-0.015707963267948877, 0.16728452270620942], [1.1102230246251565e-16, 0.17194079762199654], [0.015707963267948988, 0.17713846153846158], [0.031415926535897976, 0.18402467232074016], [0.04712388980384696, 0.19673689698530994], [0.06283185307179595, 0.19486028711075587], [0.07853981633974494, 0.20200415495539537], [0.09424777960769393, 0.21628412956209975], [0.1099557428756428, 0.22103435672514615], [0.1256637061435918, 0.23005790861959197], [0.14137166941154078, 0.2363641876118], [0.15707963267948977, 0.2458509056706818], [0.17278759594743875, 0.2588966635634704], [0.18849555921538763, 0.26201424578487065], [0.20420352248333662, 0.26925737660540805], [0.2199114857512856, 0.2795866407069043], [0.23561944901923448, 0.286737814017627], [0.2513274122871836, 0.2998001133685373], [0.26703537555513246, 0.3066690421046381], [0.28274333882308156, 0.3106781677572873], [0.29845130209103043, 0.32843692271020797], [0.3141592653589793, 0.33771334081379556], [0.3298672286269284, 0.34245603664844093], 
[0.3455751918948773, 0.34534374630221276], [0.3612831551628264, 0.3659011173678469], [0.37699111843077526, 0.37299441669115485], [0.39269908169872414, 0.37681074078435994], [0.40840704496667324, 0.3869912469423241], [0.4241150082346221, 0.3993829881004848], [0.4398229715025712, 0.4048929843671799], [0.4555309347705201, 0.4132981065609863], [0.47123889803846897, 0.42521736584794634], [0.48694686130641807, 0.43427112975621207], [0.5026548245743669, 0.43965897398206677], [0.518362787842316, 0.4511849449168639], [0.5340707511102649, 0.4616781373553961], [0.549778714378214, 0.47210073674014497], [0.5654866776461629, 0.4807213018618971], [0.5811946409141118, 0.4909924471743028], [0.5969026041820609, 0.4968177152075084], [0.6126105674500097, 0.5100533442757489], [0.6283185307179588, 0.5152191796920907], [0.6440264939859077, 0.5252105790186723], [0.6597344572538566, 0.5314356655138779], [0.6754424205218057, 0.5418173266308022], [0.6911503837897546, 0.5541194523135033], [0.7068583470577037, 0.5648567789330252], [0.7225663103256525, 0.571584958134856], [0.7382742735936014, 0.5777764576588351], [0.7539822368615505, 0.589867775961967], [0.7696902001294994, 0.6021138259656207]]

# 转换为 NumPy 数组
data_array = np.array(data)

# 提取 x, y 值
x_values = data_array[:, 0]
y_values = data_array[:, 1]

# 创建散点图
plt.scatter(x_values, y_values, color='red', marker='o')

# 设置坐标轴标签
plt.xlabel('X-axis')
plt.ylabel('Y-axis')

# 设置图标题
plt.title('Scatter Plot of 2D Points')

# 显示图形
plt.show()


# import matplotlib.pyplot as plt
# from mpl_toolkits.mplot3d import Axes3D
# import numpy as np

# # 初始化空的数据列表
# center_x_data = []
# center_y_data = []
# center_z_data = []

# # 创建初始的Matplotlib图形
# fig = plt.figure()
# ax = fig.add_subplot(111, projection='3d')
# ax.set_xlabel('X轴')
# ax.set_ylabel('Y轴')
# ax.set_zlabel('Z轴')

# x_min, x_max = -3, 3
# y_min, y_max = -3, 3
# z_min, z_max = -3, 3

# ax.set_xlim(x_min, x_max)
# ax.set_ylim(y_min, y_max)
# ax.set_zlim(z_min, z_max)

# # 创建一个散点图对象
# scatter = ax.scatter(center_x_data, center_y_data, center_z_data, c='blue', marker='o')

# buffer_size = 1

# def update_plot(center_x, center_y, center_z):
#     center_x_data.append(center_x)
#     center_y_data.append(center_y)
#     center_z_data.append(center_z)

#     if len(center_x_data) > buffer_size:
#         center_x_data.pop(0)
#         center_y_data.pop(0)
#         center_z_data.pop(0)

#     # 更新散点图的数据
#     print("散点图数据",center_x_data, center_y_data, center_z_data)
#     scatter._offsets3d = (center_x_data, center_y_data, center_z_data)

#     ax.relim()
#     ax.autoscale_view()

#     plt.draw()
#     plt.pause(0.01)

# def receive_and_plot(center_x, center_y, center_z):
#     update_plot(center_x, center_y, center_z)

# # 示例数据，可根据实际情况更新
# center_x_values = [1]
# center_y_values = [0]
# center_z_values = [0]

# while(1):
#     receive_and_plot(center_x_values[0], center_y_values[0], center_z_values[0])

# plt.show()
